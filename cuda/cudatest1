#include "stdlib.h"
#include "stdio.h"
#include <math.h>
#include <cuda.h>



void generateArray(int* data, int size);

__global__
void vectAddKernel(float* A, float* B, float* C, int n){
  int i = threadIdx.x+blockDim.x*blockIdx.x;
  if (i<n){
    *(C+i)=*(A+i)+*(B+i);
  }
}

void vectorAdd(float* A, float* B,float* C, int n){
  int size=sizeof(float)*n;
  
  float* d_A,d_B,d_C;
  
  int _sa = cudaMalloc((void**)(&d_A),size);
  int _sb = cudaMalloc((void**)(&d_B),size);
  int _sc = cudaMalloc((void**)(&d_C),size);
  
  cudaMemcpy(d_A,A,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_B,B,size,cudaMemcpyHostToDevice);
  
    vectAddKernel<<<(n/256.0),256>>>(d_A,d_B,d_C,n);
  
  cudaMemcpy(C,d_C,size,cudaMemcpyDeviceToHost);
  
  
  cudaFree(d_A);
  cudaFree(d_B);
  cudaFree(d_C);

}


int main(int argc, char* argc[]){
    if (argc != 2){
      printf("Numero incorrecto de argumentos\n");
      return -1;
    }
    int n = atoi(argv[1]);
    
    int* arr1 = (int*)malloc(sizeof(int)*n);
    int* arr2 = (int*)malloc(sizeof(int)*n);
    int* res = (int*)malloc(sizeof(int)*n);
    generateArray(arr1,n);
    generateArray(arr2,n);


    vectorAdd(arr1,arr2,res);
    
    printf("Array 1:");
    for(int i=0;i<n;i++){
      printf(" %d",*(arr1+i));
    }
    printf("\n");
    
    printf("Array 2:");
    for(int i=0;i<n;i++){
      printf(" %d",*(arr2+i));
    }
    printf("\n");
    
    
    printf("Res:");
    for(int i=0;i<n;i++){
      printf(" %d",*(res+i));
    }
    printf("\n");

}

void generateArray(int* data, int size){
  for(int i=0;i<size;i++){
    *(data+i)=rand() % max_val;
  }
}

